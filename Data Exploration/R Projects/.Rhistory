state = "IA")
Disabled <- Disabled %>% separate(variable, into = c("Race", "Age"), sep = "\\.") %>%
White <- get_acs(geography = "county",
variables = c(White = DisabledWhite, Black = DisabledBlack),
Disabled <- get_acs(geography = "county",
variables = c("WHITE ALONE" = DisabledWhite, "BLACK OR AFRICAN AMERICAN ALONE" = DisabledBlack, "AMERICAN, INDIAN AND ALASKA NATIVE ALONE" = DisabledIndianAlaska, "ASIAN ALONE" = DisabledAsian, "NATIVE HAWAIIAN AND OTHER PACIFIC ISLANDER ALONE" = DisabledHawaiianPacific, "SOME OTHER RACE ALONE" = DisabledOtherAlone, "TWO OR MORE RACES" = DisabledTwoMore, "WHITE ALONE, NOT HISPANIC OR LATINO" = DisabledWhiteAlone, "HISPANIC OR LATINO" = DisabledHispanicLatino),
year = 2020,
state = "IA")
Disabled <- Disabled %>% separate(variable, into = c("Race", "Age"), sep = "\\.") %>%
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus)
library(tidyverse)
acs5 <- load_variables(2020, "acs5")
view(acs5)
DisabledWhite <- c("Under 18 years" = "B18101A_003", "18 to 64 years" = "B18101A_006", "65 years and over" = "B18101A_009")
DisabledBlack <- c("Under 18 years" = "B18101B_003", "18 to 64 years" = "B18101B_006", "65 years and over" = "B18101B_009")
DisabledIndianAlaska <- c("Under 18 years" = "B18101C_003", "18 to 64 years" = "B18101C_006", "65 years and over" = "B18101C_009")
DisabledAsian <- c("Under 18 years" = "B18101D_003", "18 to 64 years" = "B18101D_006", "65 years and over" = "B18101D_009")
DisabledHawaiianPacific <- c("Under 18 years" = "B18101E_003", "18 to 64 years" = "B18101E_006", "65 years and over" = "B18101E_009")
DisabledOtherAlone <- c("Under 18 years" = "B18101F_003", "18 to 64 years" = "B18101F_006", "65 years and over" = "B18101F_009")
DisabledTwoMore <- c("Under 18 years" = "B18101G_003", "18 to 64 years" = "B18101G_006", "65 years and over" = "B18101G_009")
DisabledWhiteAlone <- c("Under 18 years" = "B18101H_003", "18 to 64 years" = "B18101H_006", "65 years and over" = "B18101H_009")
DisabledHispanicLatino <- c("Under 18 years" = "B18101I_003", "18 to 64 years" = "B18101I_006", "65 years and over" = "B18101I_009")
White <- get_acs(geography = "county",
variables = c(White = DisabledWhite, Black = DisabledBlack),
Disabled <- get_acs(geography = "county",
variables = c("WHITE ALONE" = DisabledWhite, "BLACK OR AFRICAN AMERICAN ALONE" = DisabledBlack, "AMERICAN, INDIAN AND ALASKA NATIVE ALONE" = DisabledIndianAlaska, "ASIAN ALONE" = DisabledAsian, "NATIVE HAWAIIAN AND OTHER PACIFIC ISLANDER ALONE" = DisabledHawaiianPacific, "SOME OTHER RACE ALONE" = DisabledOtherAlone, "TWO OR MORE RACES" = DisabledTwoMore, "WHITE ALONE, NOT HISPANIC OR LATINO" = DisabledWhiteAlone, "HISPANIC OR LATINO" = DisabledHispanicLatino),
year = 2020,
state = "IA")
Disabled <- Disabled %>% separate(variable, into = c("Race", "Age"), sep = "\\.") %>%
White <- get_acs(geography = "county",
variables = c(White = DisabledWhite, Black = DisabledBlack),
Disabled <- get_acs(geography = "county",
variables = c("WHITE ALONE" = DisabledWhite, "BLACK OR AFRICAN AMERICAN ALONE" = DisabledBlack, "AMERICAN, INDIAN AND ALASKA NATIVE ALONE" = DisabledIndianAlaska, "ASIAN ALONE" = DisabledAsian, "NATIVE HAWAIIAN AND OTHER PACIFIC ISLANDER ALONE" = DisabledHawaiianPacific, "SOME OTHER RACE ALONE" = DisabledOtherAlone, "TWO OR MORE RACES" = DisabledTwoMore, "WHITE ALONE, NOT HISPANIC OR LATINO" = DisabledWhiteAlone, "HISPANIC OR LATINO" = DisabledHispanicLatino),
year = 2020,
state = "IA"))
White <- get_acs(geography = "county",
variables = c(White = DisabledWhite, Black = DisabledBlack),
Disabled <- get_acs(geography = "county",
variables = c("WHITE ALONE" = DisabledWhite, "BLACK OR AFRICAN AMERICAN ALONE" = DisabledBlack, "AMERICAN, INDIAN AND ALASKA NATIVE ALONE" = DisabledIndianAlaska, "ASIAN ALONE" = DisabledAsian, "NATIVE HAWAIIAN AND OTHER PACIFIC ISLANDER ALONE" = DisabledHawaiianPacific, "SOME OTHER RACE ALONE" = DisabledOtherAlone, "TWO OR MORE RACES" = DisabledTwoMore, "WHITE ALONE, NOT HISPANIC OR LATINO" = DisabledWhiteAlone, "HISPANIC OR LATINO" = DisabledHispanicLatino),
year = 2020,
state = "IA"))
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus)
library(tidyverse)
acs5 <- load_variables(2020, "acs5")
view(acs5)
DisabledWhite <- c("Under 18 years" = "B18101A_003", "18 to 64 years" = "B18101A_006", "65 years and over" = "B18101A_009")
DisabledBlack <- c("Under 18 years" = "B18101B_003", "18 to 64 years" = "B18101B_006", "65 years and over" = "B18101B_009")
DisabledIndianAlaska <- c("Under 18 years" = "B18101C_003", "18 to 64 years" = "B18101C_006", "65 years and over" = "B18101C_009")
DisabledAsian <- c("Under 18 years" = "B18101D_003", "18 to 64 years" = "B18101D_006", "65 years and over" = "B18101D_009")
DisabledHawaiianPacific <- c("Under 18 years" = "B18101E_003", "18 to 64 years" = "B18101E_006", "65 years and over" = "B18101E_009")
DisabledOtherAlone <- c("Under 18 years" = "B18101F_003", "18 to 64 years" = "B18101F_006", "65 years and over" = "B18101F_009")
DisabledTwoMore <- c("Under 18 years" = "B18101G_003", "18 to 64 years" = "B18101G_006", "65 years and over" = "B18101G_009")
DisabledWhiteAlone <- c("Under 18 years" = "B18101H_003", "18 to 64 years" = "B18101H_006", "65 years and over" = "B18101H_009")
DisabledHispanicLatino <- c("Under 18 years" = "B18101I_003", "18 to 64 years" = "B18101I_006", "65 years and over" = "B18101I_009")
White <- get_acs(geography = "county",
variables = c(White = DisabledWhite, Black = DisabledBlack),
Disabled <- get_acs(geography = "county",
variables = c("WHITE ALONE" = DisabledWhite, "BLACK OR AFRICAN AMERICAN ALONE" = DisabledBlack, "AMERICAN, INDIAN AND ALASKA NATIVE ALONE" = DisabledIndianAlaska, "ASIAN ALONE" = DisabledAsian, "NATIVE HAWAIIAN AND OTHER PACIFIC ISLANDER ALONE" = DisabledHawaiianPacific, "SOME OTHER RACE ALONE" = DisabledOtherAlone, "TWO OR MORE RACES" = DisabledTwoMore, "WHITE ALONE, NOT HISPANIC OR LATINO" = DisabledWhiteAlone, "HISPANIC OR LATINO" = DisabledHispanicLatino),
year = 2020,
state = "IA"))
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus)
library(tidyverse)
library(tidyr)
library(dplyr)
library(stringr)
IVRS_data <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE)
IVRS_data <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE)
View(IVRS_data)
IVRS_data <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE)
View(IVRS_data)
IVRS_data <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE)
View(IVRS_data)
View(IVRS_data)
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus)
library(tidyverse)
library(tidyr)
library(dplyr)
library(stringr)
library(zipcodeR)
install.packages("zipcodeR")
library(tidycensus)
library(tidyverse)
library(tidyr)
library(dplyr)
library(stringr)
library(zipcodeR)
IVRS_data <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE)
View(IVRS_data)
reverse_zipcode(0)
reverse_zipcode(50010)
reverse_zipcode(50010$state)
reverse_zipcode(50010)$state
IVRS_Data_Manipulate <- IVRS_data %>%
mutate(State_id == reverse_zipcode("Client Zip Code")$state)
IVRS_Data_Manipulate <- IVRS_data %>%
mutate(State_id == reverse_zipcode(IVRS_data$`Client Zip Code`)$state)
IVRS_data$`Client Zip Code`[1]
for (x in range(length(IVRS_data$`Client Zip Code`))) {
print(x)
}
for (x in range(0:length(IVRS_data$`Client Zip Code`))) {
print(x)
}
for (x in range(1:length(IVRS_data$`Client Zip Code`))) {
print(x)
}
for (x in range(length(IVRS_data$`Client Zip Code`))) {
print(x)
}
length(IVRS_data$`Client Zip Code`)
for (x in range(length(IVRS_data$`Client Zip Code`))) {
print(x)
}
ncol(IVRS_data$`Client Zip Code`)
for (x in range(length(IVRS_data$`Client Zip Code`))) {
print(x)
}
ncol(IVRS_data$`Client Zip Code`)
for (x in range(length(IVRS_data$`Client Zip Code`))) {
print(x)
}
NCOL(IVRS_data$`Client Zip Code`)
for (x in range(length(IVRS_data$`Client Zip Code`))) {
print(x)
}
NCOL(IVRS_data$`Client Zip Code`)
for (x in range(length(IVRS_data$`Client Zip Code`))) {
print(x)
}
NCOL(IVRS_data$`Client Zip Code`)
for (x in range(length(IVRS_data$`Client Zip Code`))) {
print(x)
}
NCOL(IVRS_data$`Client Zip Code`)
for (x in range(length(IVRS_data$`Client Zip Code`))) {
print(x)
}
NCOL(IVRS_data$`Client Zip Code`)
for (x in range(length(IVRS_data$`Client Zip Code`))) {
print(x)
}
NROW(IVRS_data$`Client Zip Code`)
for (x in range(length(IVRS_data$`Client Zip Code`))) {
print(x)
}
length(IVRS_data$`Client Zip Code`)
for (x in range(1:length(IVRS_data$`Client Zip Code`))) {
print(x)
}
length(IVRS_data$`Client Zip Code`)
for (zippy in range(1:length(IVRS_data$`Client Zip Code`))) {
print(IVRS_data$`Client Zip Code`[zippy])
}
for (zippy in range(1:length(IVRS_data$`Client Zip Code`))) {
print(IVRS_data$`Client Zip Code`[zippy])
}
for (zippy in range(1:length(IVRS_data$`Client Zip Code`))) {
zippy =+ 1
print(IVRS_data$`Client Zip Code`[zippy])
}
for (zippy in range(1:length(IVRS_data$`Client Zip Code`))) {
print(IVRS_data$`Client Zip Code`[zippy])
zippy =+ 1
}
for (zippy in range(1:length(IVRS_data$`Client Zip Code`))) {
print(IVRS_data$`Client Zip Code`[zippy])
zippy =+ 1
}
for (zippy in range(1:length(IVRS_data$`Client Zip Code`))) {
print(IVRS_data$`Client Zip Code`[zippy])
zippy =+ 1
}
for (zippy in range(1:length(IVRS_data$`Client Zip Code`))) {
print(IVRS_data$`Client Zip Code`[[zippy]])
zippy =+ 1
}
for (zippy in range(1:length(IVRS_data$`Client Zip Code`))) {
print(IVRS_data$`Client Zip Code`[[zippy]])
}
zcodes = IVRS_data$`Client Zip Code`
for (zippy in range(1:length(IVRS_data$`Client Zip Code`))) {
print(IVRS_data$`Client Zip Code`[[zippy]])
zippy =+ 1
}
zcodes = IVRS_data$`Client Zip Code`
for (zippy in range(1:length(zcodes))) {
print(zcodes[zippy])
}
zcodes = IVRS_data$`Client Zip Code`
for (zippy in range(1:length(zcodes))) {
print(zcodes[zippy])
}
zcodes = IVRS_data$`Client Zip Code`
for (zippy in range(1:length(zcodes))) {
print(zcodes[[zippy]])
}
zcodes = IVRS_data$`Client Zip Code`
for (i in range(1:length(zcodes))) {
IVRS_data$Zips <- zcodes[i]^2
}
View(IVRS_data)
zcodes = IVRS_data$`Client Zip Code`
for (i in 1:length(zcodes)) {
IVRS_data$Zips <- zcodes[i]^2
}
zcodes = IVRS_data$`Client Zip Code`
for (i in 1:length(zcodes)) {
print(i)
}
zcodes = IVRS_data$`Client Zip Code`
for (i in 1:length(zcodes)) {
IVRS_data$AAA_newzip <- reverse_zipcode(zcodes[i])
}
zcodes = IVRS_data$`Client Zip Code`
for (i in 1:length(zcodes)) {
IVRS_data$AAA_newzip <- reverse_zipcode(zcodes[i])
}
zcodes = IVRS_data$`Client Zip Code`
for (i in 1:length(zcodes)) {
IVRS_data$AAA_newzip <- reverse_zipcode(zcodes[i])$state
}
zcodes <- IVRS_data$`Client Zip Code` %>%
na.omit(zcodes)
for (i in 1:length(zcodes)) {
IVRS_data$AAA_newzip <- reverse_zipcode(zcodes[i])$state
}
usethis::use_vignette("my-vignette")
usethis::use_vignette("my-vignette")
---
title: '"Just the Facts" on Workforce and Economic Development'
title: '"Just the Facts" on Workforce and Economic Development'
install.packages("rmarkdown")
install.packages("rmarkdown")
title: "SUccessful Employment for Iowans with Disabilities"
IVRS_data_old <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE)
IVRS_data_new_2020 <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE,fileEncoding="UTF-8-BOM")
IVRS_data_new_2021 <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE)
IVRS_County_Office <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE)
# Initial split on comma to get City
IVRS_data_transformed <- IVRS_data_old %>%
separate('Client Location', c('Client City', 'Client State Zip Code'), ',')
library(tidyr)
library(dplyr)
library(stringr)
library(zipcodeR)
library(tibble)
# Initial split on comma to get City
IVRS_data_transformed <- IVRS_data_old %>%
separate('Client Location', c('Client City', 'Client State Zip Code'), ',')
# Remove any leading and trailing whitespace
IVRS_data_transformed$'Client City' <- str_trim(IVRS_data_transformed$'Client City')
# Secondary split to get State and Zipcode
IVRS_data_transformed <- IVRS_data_transformed %>%
separate('Client State Zip Code',c('Client State','Client Zip Code'),sep="\\s+(?=\\S*$)")
# Remove any leading and trailing whitespace
IVRS_data_transformed$'Client State' <- str_trim(IVRS_data_transformed$'Client State')
# Split Zip code into 5 digit format and extra information
IVRS_data_transformed <- IVRS_data_transformed %>%
separate('Client Zip Code',c('Client Zip Code','Client Zip Code Extra Info'),sep=5)
# Remove any leading and trailing whitespace
IVRS_data_transformed$'Client Zip Code' <- str_trim(IVRS_data_transformed$'Client Zip Code')
# Remove '-' from extra zip code info
IVRS_data_transformed$'Client Zip Code Extra Info' <-
str_replace_all(IVRS_data_transformed$'Client Zip Code Extra Info', "[^[:alnum:]]", "")
# Remove any leading and trailing whitespace
IVRS_data_transformed$'Client Zip Code Extra Info' <- str_trim(IVRS_data_transformed$'Client Zip Code Extra Info')
# Append 2021 to 2020 data
appended <- rbind(IVRS_data_new_2021, IVRS_data_new_2020)
# left join data including only new columns
IVRS_merged <- left_join(IVRS_data_transformed, select(IVRS_data_new_2020, c(2,43:53)), by = c("Case ID" = "CaseID"))
# Renames Iowa county O'Brien to have ' instead of Oâ€™Brien (Double check wording in the data as these characters consistently incorrectly save)
# !!IMPORTANT!! File needs to be saved using UTF-8 encoding for the special characters to not disappear.
#               This can be changed in File -> Save with encoding -> Choose Encoding -> UTF-8
IVRS_merged$'Client County'[IVRS_merged$'Client County' == 'Oâ€™Brien'] <- "O'Brien"
View(IVRS_merged)
stateNames <- rep(NA, dim(IVRS_merged)[1])
index <- 0
for(state in IVRS_merged$'Client State'){
state <- str_trim(state)
index <- index + 1
if(is.na(state)){
stateNames[index] <- NA
}
else if(state == 'ArKS'){
stateNames[index] <- 'Arkansas'
}
else if(state == 'ARKS'){
stateNames[index] <- 'Arkansas'
}
else if(state == 'District of Columbia'){
stateNames[index] <- state
}
else if(state == 'Puerto Rico'){
stateNames[index] <- NA
}
else if(state == 'West VA'){
stateNames[index] <- 'West Virginia'
}
else if(nchar(state) > 2){
stateNames[index] <- state
}
else {
stateNames[index] <- state.name[grep(state, state.abb)]
}
}
IVRS_merged$'Client State' <- stateNames
library(tidyr)
library(dplyr)
library(stringr)
library(zipcodeR)
library(tibble)
# load in IVRS adjusted inflation file
IVRS_data_old <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE)
#load in IVRS 2020 new data
IVRS_data_new_2020 <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE,fileEncoding="UTF-8-BOM")
# load in IVRS adjusted inflation file
IVRS_data_old <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE)
#load in IVRS 2020 new data
IVRS_data_new_2020 <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE,fileEncoding="UTF-8-BOM")
#load in IVRS 2021 new data
IVRS_data_new_2021 <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE)
#load in IVRS county offices file
IVRS_County_Office <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE, check.names = FALSE)
# Initial split on comma to get City
IVRS_data_transformed <- IVRS_data_old %>%
separate('Client Location', c('Client City', 'Client State Zip Code'), ',')
# Remove any leading and trailing whitespace
IVRS_data_transformed$'Client City' <- str_trim(IVRS_data_transformed$'Client City')
# Secondary split to get State and Zipcode
IVRS_data_transformed <- IVRS_data_transformed %>%
separate('Client State Zip Code',c('Client State','Client Zip Code'),sep="\\s+(?=\\S*$)")
# Remove any leading and trailing whitespace
IVRS_data_transformed$'Client State' <- str_trim(IVRS_data_transformed$'Client State')
# Split Zip code into 5 digit format and extra information
IVRS_data_transformed <- IVRS_data_transformed %>%
separate('Client Zip Code',c('Client Zip Code','Client Zip Code Extra Info'),sep=5)
# Remove any leading and trailing whitespace
IVRS_data_transformed$'Client Zip Code' <- str_trim(IVRS_data_transformed$'Client Zip Code')
# Remove '-' from extra zip code info
IVRS_data_transformed$'Client Zip Code Extra Info' <-
str_replace_all(IVRS_data_transformed$'Client Zip Code Extra Info', "[^[:alnum:]]", "")
# Remove any leading and trailing whitespace
IVRS_data_transformed$'Client Zip Code Extra Info' <- str_trim(IVRS_data_transformed$'Client Zip Code Extra Info')
# Append 2021 to 2020 data
appended <- rbind(IVRS_data_new_2021, IVRS_data_new_2020)
# left join data including only new columns
IVRS_merged <- left_join(IVRS_data_transformed, select(IVRS_data_new_2020, c(2,43:53)), by = c("Case ID" = "CaseID"))
View(IVRS_merged)
# Renames Iowa county O'Brien to have ' instead of Oâ€™Brien (Double check wording in the data as these characters consistently incorrectly save)
# !!IMPORTANT!! File needs to be saved using UTF-8 encoding for the special characters to not disappear.
#               This can be changed in File -> Save with encoding -> Choose Encoding -> UTF-8
IVRS_merged$'Client County'[IVRS_merged$'Client County' == 'Oâ€™Brien'] <- "O'Brien"
stateNames <- rep(NA, dim(IVRS_merged)[1])
index <- 0
for(state in IVRS_merged$'Client State'){
state <- str_trim(state)
index <- index + 1
if(is.na(state)){
stateNames[index] <- NA
}
else if(state == 'ArKS'){
stateNames[index] <- 'Arkansas'
}
else if(state == 'ARKS'){
stateNames[index] <- 'Arkansas'
}
else if(state == 'District of Columbia'){
stateNames[index] <- state
}
else if(state == 'Puerto Rico'){
stateNames[index] <- NA
}
else if(state == 'West VA'){
stateNames[index] <- 'West Virginia'
}
else if(nchar(state) > 2){
stateNames[index] <- state
}
else {
stateNames[index] <- state.name[grep(state, state.abb)]
}
}
IVRS_merged$'Client State' <- stateNames
# change columns to numeric
IVRS_merged$'Hourly Wage (Application)' <- as.integer(IVRS_merged$'Hourly Wage (Application)')
IVRS_merged$'Hourly Wage (Closure)' <- as.integer(IVRS_merged$'Hourly Wage (Closure)')
IVRS_merged$'Monthly Wage (Application)' <- as.integer(IVRS_merged$'Monthly Wage (Application)')
IVRS_merged$'Monthly Wage (Closure)' <- as.integer(IVRS_merged$'Monthly Wage (Closure)')
IVRS_merged$'Annual Wage (Application)' <- as.integer(IVRS_merged$'Annual Wage (Application)')
IVRS_merged$'Annual Wage (Closure)' <- as.integer(IVRS_merged$'Annual Wage (Closure)')
IVRS_merged$'Hourly Wage Change' <- as.integer(IVRS_merged$'Hourly Wage Change')
IVRS_merged$'Monthly Wage Change' <- as.integer(IVRS_merged$'Monthly Wage Change')
IVRS_merged$'Annual Wage Change' <- as.integer(IVRS_merged$'Annual Wage Change')
# hourly
IVRS_merged$'Hourly Wage (Application)'[is.na(IVRS_merged$'Hourly Wage (Application)')] <- 0
IVRS_merged$'Hourly Wage (Closure)'[IVRS_merged$'Hourly Wage (Closure)' == 0] <- NA
#monthly
IVRS_merged$'Monthly Wage (Application)'[is.na(IVRS_merged$'Monthly Wage (Application)')] <- 0
IVRS_merged$'Monthly Wage (Closure)'[IVRS_merged$'Monthly Wage (Closure)' == 0] <- NA
#annually
IVRS_merged$'Annual Wage (Application)'[is.na(IVRS_merged$'Annual Wage (Application)')] <- 0
IVRS_merged$'Annual Wage (Closure)'[IVRS_merged$'Annual Wage (Closure)' == 0] <- NA
# Recalculated wage change fields
IVRS_merged$'Hourly Wage Change' <- IVRS_merged$'Hourly Wage (Closure)' - IVRS_merged$'Hourly Wage (Application)'
IVRS_merged$'Monthly Wage Change' <- IVRS_merged$'Monthly Wage (Closure)' - IVRS_merged$'Monthly Wage (Application)'
IVRS_merged$'Annual Wage Change' <- IVRS_merged$'Annual Wage (Closure)' - IVRS_merged$'Annual Wage (Application)'
# Creates new columns for whether there was a wage increase, no change, decrease, or unemployed
IVRS_merged <- mutate(IVRS_merged, 'Hourly Wage Change Category' = case_when(
IVRS_merged$'Hourly Wage Change' < 0 ~ "Decrease",
IVRS_merged$'Hourly Wage Change' == 0 ~ "No Change",
IVRS_merged$'Hourly Wage Change' > 0 ~ "Increase",
is.na(IVRS_merged$'Hourly Wage Change') ~ "Unemployed"))
IVRS_merged <- mutate(IVRS_merged, 'Monthly Wage Change Category' = case_when(
IVRS_merged$'Monthly Wage Change' < 0 ~ "Decrease",
IVRS_merged$'Monthly Wage Change' == 0 ~ "No Change",
IVRS_merged$'Monthly Wage Change' > 0 ~ "Increase",
is.na(IVRS_merged$'Monthly Wage Change') ~ "Unemployed"))
IVRS_merged <- mutate(IVRS_merged, 'Annual Wage Change Category' = case_when(
IVRS_merged$'Annual Wage Change' < 0 ~ "Decrease",
IVRS_merged$'Annual Wage Change' == 0 ~ "No Change",
IVRS_merged$'Annual Wage Change' > 0 ~ "Increase",
is.na(IVRS_merged$'Annual Wage Change') ~ "Unemployed"))
# remove numbers from office areas
IVRS_merged$`Office Area` = substr(IVRS_merged$`Office Area`,1,nchar(IVRS_merged$`Office Area`)-6)
# write to file
write.csv(IVRS_merged, "C:/Users/joelm/Documents/GitHub/DHR-Disabilities/Data Exploration/Datasets/IVRS Data/Cleaned_Closed_Iowa_Vocational_Rehabilitation_Cases_New_Data.csv", row.names = FALSE)
View(IVRS_data_old)
# left join data including only new columns
IVRS_merged <- left_join(IVRS_data_transformed, select(IVRS_data_new_2020, c(2,43:53)), by = c("Case ID" = "CaseID"))
library(tidyr)
library(dplyr)
library(stringr)
library(zipcodeR)
library(tibble)
# left join data including only new columns
IVRS_merged <- left_join(IVRS_data_transformed, select(IVRS_data_new_2020, c(2,43:53)), by = c("Case ID" = "CaseID"))
# Renames Iowa county O'Brien to have ' instead of Oâ€™Brien (Double check wording in the data as these characters consistently incorrectly save)
# !!IMPORTANT!! File needs to be saved using UTF-8 encoding for the special characters to not disappear.
#               This can be changed in File -> Save with encoding -> Choose Encoding -> UTF-8
IVRS_merged$'Client County'[IVRS_merged$'Client County' == 'Oâ€™Brien'] <- "O'Brien"
stateNames <- rep(NA, dim(IVRS_merged)[1])
index <- 0
for(state in IVRS_merged$'Client State'){
state <- str_trim(state)
index <- index + 1
if(is.na(state)){
stateNames[index] <- NA
}
else if(state == 'ArKS'){
stateNames[index] <- 'Arkansas'
}
else if(state == 'ARKS'){
stateNames[index] <- 'Arkansas'
}
else if(state == 'District of Columbia'){
stateNames[index] <- state
}
else if(state == 'Puerto Rico'){
stateNames[index] <- NA
}
else if(state == 'West VA'){
stateNames[index] <- 'West Virginia'
}
else if(nchar(state) > 2){
stateNames[index] <- state
}
else {
stateNames[index] <- state.name[grep(state, state.abb)]
}
}
IVRS_merged$'Client State' <- stateNames
View(IVRS_merged)
# hourly
IVRS_merged$'Hourly Wage (Application)'[is.na(IVRS_merged$'Hourly Wage (Application)')] <- 0
IVRS_merged$'Hourly Wage (Closure)'[IVRS_merged$'Hourly Wage (Closure)' == 0] <- NA
#monthly
IVRS_merged$'Monthly Wage (Application)'[is.na(IVRS_merged$'Monthly Wage (Application)')] <- 0
IVRS_merged$'Monthly Wage (Closure)'[IVRS_merged$'Monthly Wage (Closure)' == 0] <- NA
#annually
IVRS_merged$'Annual Wage (Application)'[is.na(IVRS_merged$'Annual Wage (Application)')] <- 0
IVRS_merged$'Annual Wage (Closure)'[IVRS_merged$'Annual Wage (Closure)' == 0] <- NA
# Recalculated wage change fields
IVRS_merged$'Hourly Wage Change' <- IVRS_merged$'Hourly Wage (Closure)' - IVRS_merged$'Hourly Wage (Application)'
IVRS_merged$'Monthly Wage Change' <- IVRS_merged$'Monthly Wage (Closure)' - IVRS_merged$'Monthly Wage (Application)'
IVRS_merged$'Annual Wage Change' <- IVRS_merged$'Annual Wage (Closure)' - IVRS_merged$'Annual Wage (Application)'
# Creates new columns for whether there was a wage increase, no change, decrease, or unemployed
IVRS_merged <- mutate(IVRS_merged, 'Hourly Wage Change Category' = case_when(
IVRS_merged$'Hourly Wage Change' < 0 ~ "Decrease",
IVRS_merged$'Hourly Wage Change' == 0 ~ "No Change",
IVRS_merged$'Hourly Wage Change' > 0 ~ "Increase",
is.na(IVRS_merged$'Hourly Wage Change') ~ "Unemployed"))
IVRS_merged <- mutate(IVRS_merged, 'Monthly Wage Change Category' = case_when(
IVRS_merged$'Monthly Wage Change' < 0 ~ "Decrease",
IVRS_merged$'Monthly Wage Change' == 0 ~ "No Change",
IVRS_merged$'Monthly Wage Change' > 0 ~ "Increase",
is.na(IVRS_merged$'Monthly Wage Change') ~ "Unemployed"))
IVRS_merged <- mutate(IVRS_merged, 'Annual Wage Change Category' = case_when(
IVRS_merged$'Annual Wage Change' < 0 ~ "Decrease",
IVRS_merged$'Annual Wage Change' == 0 ~ "No Change",
IVRS_merged$'Annual Wage Change' > 0 ~ "Increase",
is.na(IVRS_merged$'Annual Wage Change') ~ "Unemployed"))
# remove numbers from office areas
IVRS_merged$`Office Area` = substr(IVRS_merged$`Office Area`,1,nchar(IVRS_merged$`Office Area`)-6)
View(IVRS_merged)
# write to file
write.csv(IVRS_merged, "C:/Users/joelm/Documents/GitHub/DHR-Disabilities/Data Exploration/Datasets/IVRS Data/Cleaned_Closed_Iowa_Vocational_Rehabilitation_Cases_New_Data.csv", row.names = FALSE)
# write to file
write.csv(IVRS_merged, "C:/Users/joelm/Documents/GitHub/DHR-Disabilities/Data Exploration/Datasets/IVRS Data/Cleaned_Closed_Iowa_Vocational_Rehabilitation_Cases_New_Data.csv", row.names = FALSE)
